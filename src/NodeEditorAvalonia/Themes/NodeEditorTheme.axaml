<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:m="clr-namespace:NodeEditor.Model;assembly=NodeEditorAvalonia.Model"
        xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
        xmlns:behaviors="clr-namespace:NodeEditor.Behaviors"
        xmlns:converters="clr-namespace:NodeEditor.Converters"
        xmlns:controls="clr-namespace:NodeEditor.Controls"
        x:CompileBindings="True">

  <!-- Node -->

  <Style Selector="controls|Node">
    <Setter Property="Width" Value="{Binding Width}" x:DataType="m:INode" />
    <Setter Property="Height" Value="{Binding Height}" x:DataType="m:INode" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Template">
      <ControlTemplate x:DataType="m:INode">
        <Panel Width="{Binding Width}" 
               Height="{Binding Height}">
          <ContentPresenter Name="PART_ContentPresenter"
                            Content="{Binding Content}"/>
          <ItemsControl Name="PART_PinsItemsControl"
                        Items="{Binding Pins}"
                        Width="{Binding Width}"
                        Height="{Binding Height}"
                        ClipToBounds="False">
            <ItemsControl.Styles>
              <Style Selector="ItemsControl > ContentPresenter" x:DataType="m:IPin">
                <Setter Property="Canvas.Left" Value="{Binding X}" />
                <Setter Property="Canvas.Top" Value="{Binding Y}" />
              </Style>
            </ItemsControl.Styles>
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <Canvas />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="m:IPin">
                <controls:Pin Name="PART_Pin" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>

  <Style Selector="controls|Node /template/ ItemsControl#PART_PinsItemsControl > :is(ContentPresenter)">
    <Setter Property="(i:Interaction.Behaviors)">
      <i:BehaviorCollectionTemplate>
        <i:BehaviorCollection>
          <behaviors:PinPressedBehavior />
        </i:BehaviorCollection>
      </i:BehaviorCollectionTemplate>
    </Setter>
  </Style>

  <Style Selector="controls|Node /template/ ContentPresenter#PART_ContentPresenter">
    <Setter Property="IsHitTestVisible" Value="{Binding $self.(controls:DrawingNode.IsEditMode), Mode=OneWay, Converter={x:Static BoolConverters.Not}}" 
            x:DataType="controls:Node"
            x:CompileBindings="False"/>
  </Style>

  <!--
  <Style Selector="controls|Node:selected /template/ ItemsControl#PART_PinsItemsControl">
    <Setter Property="IsVisible" Value="False" />
  </Style>
  -->

  <!-- Connector -->

  <Style Selector="controls|Connector">
    <Setter Property="Stroke" Value="Red" />
    <Setter Property="StrokeThickness" Value="2" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="ContextFlyout">
      <Setter.Value>
        <Flyout x:DataType="m:IConnector">
          <DockPanel>
            <DockPanel DockPanel.Dock="Top">
              <Label Content="Orientation:" DockPanel.Dock="Top" />
              <RadioButton Content="Auto"
                           GroupName="Orientation"
                           IsChecked="{Binding Orientation, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:ConnectorOrientation.Auto}}"
                           DockPanel.Dock="Top" />
              <RadioButton Content="Horizontal"
                           GroupName="Orientation"
                           IsChecked="{Binding Orientation, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:ConnectorOrientation.Horizontal}}"
                           DockPanel.Dock="Top" />
              <RadioButton Content="Vertical"
                           GroupName="Orientation"
                           IsChecked="{Binding Orientation, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:ConnectorOrientation.Vertical}}"
                           DockPanel.Dock="Top" />
            </DockPanel>
            <Label Content="Offset:" DockPanel.Dock="Top" />
            <TextBox Text="{Binding Offset}" DockPanel.Dock="Top" />
          </DockPanel>
        </Flyout>
      </Setter.Value>
    </Setter>
  </Style>

  <!--
  <Style Selector="controls|Connector:selected">
    <Setter Property="Stroke" Value="Blue" />
  </Style>
  -->

  <!-- Pin -->

  <Style Selector="controls|Pin">
    <Setter Property="Width" Value="{Binding Width}" x:DataType="m:IPin" />
    <Setter Property="Height" Value="{Binding Height}" x:DataType="m:IPin" />
    <Setter Property="Margin" Value="{Binding Converter={x:Static converters:PinMarginConverter.Instance}}" x:DataType="m:IPin" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Template">
      <ControlTemplate x:DataType="m:IPin">
        <Rectangle Name="PART_Pin"
                   Width="{Binding Width}"
                   Height="{Binding Height}" />
      </ControlTemplate>
    </Setter>
    <Setter Property="(ToolTip.Tip)">
      <Template>
        <TextBlock Text="{Binding Name}" 
                   x:DataType="m:IPin" />
      </Template>
    </Setter>
    <Setter Property="ContextFlyout">
      <Setter.Value>
        <Flyout x:DataType="m:IPin">
          <DockPanel>
            <Label Content="Name:" DockPanel.Dock="Top" />
            <TextBox Text="{Binding Name}" DockPanel.Dock="Top" />
            <Label Content="Alignment:" DockPanel.Dock="Top" />
            <RadioButton Content="None"
                         GroupName="Alignment"
                         IsChecked="{Binding Alignment, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:PinAlignment.None}}"
                         DockPanel.Dock="Top" />
            <RadioButton Content="Left"
                         GroupName="Alignment"
                         IsChecked="{Binding Alignment, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:PinAlignment.Left}}"
                         DockPanel.Dock="Top" />
            <RadioButton Content="Right"
                         GroupName="Alignment"
                         IsChecked="{Binding Alignment, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:PinAlignment.Right}}"
                         DockPanel.Dock="Top" />
            <RadioButton Content="Top"
                         GroupName="Alignment"
                         IsChecked="{Binding Alignment, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:PinAlignment.Top}}"
                         DockPanel.Dock="Top" />
            <RadioButton Content="Bottom"
                         GroupName="Alignment"
                         IsChecked="{Binding Alignment, Converter={x:Static converters:EnumToCheckedConverter.Instance}, ConverterParameter={x:Static m:PinAlignment.Bottom}}"
                         DockPanel.Dock="Top" />
          </DockPanel>
        </Flyout>
      </Setter.Value>
    </Setter>
  </Style>

  <Style Selector="controls|Pin /template/ Rectangle#PART_Pin">
    <Setter Property="Fill" Value="Black" />
  </Style>

  <Style Selector="controls|Pin:pointerover /template/ Rectangle#PART_Pin">
    <Setter Property="Fill" Value="Red" />
  </Style>

  <!-- DrawingNode -->

  <Style Selector="controls|DrawingNode">
    <Setter Property="Width" Value="{Binding Width}" x:DataType="m:IDrawingNode" />
    <Setter Property="Height" Value="{Binding Height}" x:DataType="m:IDrawingNode" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="EnableSnap" Value="False" />
    <Setter Property="SnapX" Value="1.0" />
    <Setter Property="SnapY" Value="1.0" />
    <Setter Property="Template">
      <ControlTemplate x:DataType="m:IDrawingNode">
        <Panel Name="PART_Panel" 
               Background="{TemplateBinding Background}">
          <ItemsControl Name="PART_NodesItemsControl"
                        Items="{Binding Nodes}" 
                        Width="{Binding Width}" 
                        Height="{Binding Height}"
                        Background="Transparent"
                        ClipToBounds="False">
            <i:Interaction.Behaviors>
              <behaviors:NodesSelectedBehavior />
              <behaviors:DrawingSelectionBehavior InputSource="{Binding $parent[controls:DrawingNode].InputSource}" 
                                                  AdornerCanvas="{Binding $parent[controls:DrawingNode].AdornerCanvas}" 
                                                  EnableSnap="{Binding $parent[controls:DrawingNode].EnableSnap}" 
                                                  SnapX="{Binding $parent[controls:DrawingNode].SnapX}" 
                                                  SnapY="{Binding $parent[controls:DrawingNode].SnapY}" 
                                                  x:CompileBindings="False" />
              <behaviors:DrawingPressedBehavior />
              <behaviors:DrawingMovedBehavior />
            </i:Interaction.Behaviors>
            <ItemsControl.Styles>
              <Style Selector="ItemsControl > ContentPresenter" x:DataType="m:INode">
                <Setter Property="Canvas.Left" Value="{Binding X}" />
                <Setter Property="Canvas.Top" Value="{Binding Y}" />
              </Style>
            </ItemsControl.Styles>
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <Canvas />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="m:INode">
                <controls:Node Name="PART_Node" />
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
          <ItemsControl Name="PART_ConnectorsItemsControl"
                        Items="{Binding Connectors}" 
                        Width="{Binding Width}" 
                        Height="{Binding Height}"
                        Background="Transparent"
                        IsHitTestVisible="False"
                        ClipToBounds="False">
            <ItemsControl.ItemsPanel>
              <ItemsPanelTemplate>
                <Canvas />
              </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
              <DataTemplate DataType="m:IConnector">
                <controls:Connector Name="PART_Connector"
                                    StartPoint="{Binding Start, Converter={x:Static converters:PinToPointConverter.Instance}}" 
                                    EndPoint="{Binding End, Converter={x:Static converters:PinToPointConverter.Instance}}"
                                    Offset="{Binding Offset}"/>
              </DataTemplate>
            </ItemsControl.ItemTemplate>
          </ItemsControl>
        </Panel>
      </ControlTemplate>
    </Setter>
  </Style>

</Styles>
